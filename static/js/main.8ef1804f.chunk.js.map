{"version":3,"sources":["components/server/http-service.js","components/task-list/TaskList.jsx","App.js","serviceWorker.js","index.js"],"names":["HTTPServece","Object","classCallCheck","this","createClass","key","value","url","successCallback","errorCallback","xhr","XMLHttpRequest","open","send","onreadystatechange","readyState","status","prsedData","JSON","parse","response","data","setRequestHeader","stringify","URL","TaskList","_React$Component","_this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","valueChange","httpService","state","tasks","newTaskTitle","fetchData","inherits","_this2","get","setState","oldState","newState","assign","console","log","e","_this3","preventDefault","title","post","task","push","target","listItems","map","i","react","className","type","placeholder","onChange","React","App","react_default","a","createElement","TaskList_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ef1804f.chunk.js","sourcesContent":["export class HTTPServece {\r\n   get(url, successCallback, errorCallback) {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open('GET', url);\r\n    xhr.send();\r\n    xhr.onreadystatechange = function() {\r\n       if (xhr.readyState === 4) {\r\n          if (xhr.status === 200) {\r\n             const prsedData = JSON.parse(xhr.response);\r\n             successCallback(prsedData);\r\n          } else {\r\n             errorCallback(xhr);\r\n            }\r\n         }\r\n      }\r\n   }\r\n   post(url, data, successCallback, errorCallback) {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('POST', url);\r\n      xhr.setRequestHeader('content-type','application/json');\r\n      xhr.send((typeof data !== 'string') ? JSON.stringify(data) : data);\r\n      xhr.onreadystatechange = function() {\r\n         if (xhr.readyState === 4) {\r\n            if (xhr.status === 200) {\r\n               const prsedData = JSON.parse(xhr.response);\r\n               successCallback(prsedData);\r\n            } else {\r\n               errorCallback(xhr);\r\n               }\r\n            }\r\n      }\r\n   }\r\n   delete(url, successCallback, errorCallback) {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('DELETE', url);\r\n      xhr.send();\r\n      xhr.onreadystatechange = function() {\r\n         if (xhr.readyState === 4) {\r\n            if (xhr.status === 200) {\r\n               const prsedData = JSON.parse(xhr.response);\r\n               successCallback(prsedData);\r\n            } else {\r\n               errorCallback(xhr);\r\n            }\r\n         }\r\n      }\r\n   }\r\n   put(url, data, successCallback, errorCallback) {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('PUT', url);\r\n      xhr.setRequestHeader('content-type','application/json');\r\n      xhr.send(JSON.stringify(data));\r\n      xhr.onreadystatechange = function() {\r\n         if (xhr.readyState === 4) {\r\n            if (xhr.status === 200) {\r\n               const prsedData = JSON.parse(xhr.response);\r\n               successCallback(prsedData);\r\n            } else {\r\n               errorCallback(xhr);\r\n            }\r\n         }\r\n      }\r\n   }\r\n}","import *as React from 'react';\r\nimport { HTTPServece } from '../server/http-service';\r\nimport './TaskList.scss';\r\n\r\nconst URL = 'https://evening-dawn-11092.herokuapp.com/list';\r\n\r\nexport class TaskList extends React.Component {\r\n   constructor() {\r\n      super();\r\n      this.onSubmit = this.onSubmit.bind(this);\r\n      this.valueChange = this.valueChange.bind(this);\r\n      this.httpService = new HTTPServece();\r\n      this.state = {\r\n         tasks: [],\r\n         newTaskTitle: '',\r\n      };\r\n\r\n      this.fetchData();\r\n   }\r\n\r\n   fetchData() {\r\n      this.httpService.get(URL, (tasks) => {\r\n         this.setState((oldState) => {\r\n            const newState = Object.assign({}, oldState);\r\n            newState.tasks = tasks;\r\n            console.log(newState);\r\n            return newState;\r\n         })\r\n      });\r\n   }\r\n\r\n   onSubmit(e) {\r\n      e.preventDefault();\r\n      const title = this.state.newTaskTitle;\r\n      this.httpService.post(URL, {title}, (task) => {\r\n         this.setState((oldState) => {\r\n            const newState = Object.assign({}, oldState);\r\n            newState.newTaskTitle = '';\r\n            newState.tasks.push(task);\r\n            return newState;\r\n         });\r\n      })\r\n   }\r\n\r\n   valueChange(e) {\r\n      const value = e.target.value;\r\n      this.setState((oldState) => {\r\n         const newState = Object.assign({}, oldState);\r\n         newState.newTaskTitle = value;\r\n         return newState;\r\n      })\r\n   }\r\n\r\n   render() {\r\n      const listItems = this.state.tasks.map((task, i) => {\r\n         return <li key={i}>{task.title}</li>\r\n      });\r\n      return (\r\n      <div className=\"task-list\">\r\n            <form className=\"task-list__head\" onSubmit={this.onSubmit}>\r\n               <input\r\n                  className=\"task-list__input\"\r\n                  type=\"text\"\r\n                  placeholder=\"To do\"\r\n                  onChange = { this.valueChange }\r\n                  value={ this.state.newTaskTitle } />\r\n               <button className=\"rask-list__btn\">Add</button>\r\n            </form>\r\n            <ul className=\"task-list__content\">\r\n               {listItems}\r\n            </ul>\r\n            <div className=\"task-list__footer\"></div>\r\n      </div>\r\n      )\r\n   }\r\n}","import React from 'react';\nimport { TaskList } from './components/task-list/TaskList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <TaskList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}